{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hoain\\\\Project_Pomodoro_Timer_Qualified_1\\\\src\\\\pomodoro\\\\Pomodoro.js\";\nimport React, { useState } from \"react\";\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport { minutesToDuration } from \"../utils/duration\";\nimport { secondsToDuration } from \"../utils/duration\";\nimport FocusDuration from \"./FocusDuration\";\nimport BreakDuration from \"./BreakDuration\";\nimport PomodoroDisplay from \"./PomodoroDisplay\"; // These functions are defined outside of the component to insure they do not have access to state\n// and are, therefore more likely to be pure.\n\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\n\nfunction nextTick(prevState) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1); // timeRemaining = secondsToDuration(timeRemaining)\n\n  return { ...prevState,\n    timeRemaining\n  };\n}\n/**\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\n\n\nfunction nextSession(focusDuration, breakDuration) {\n  /**\n   * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n   */\n  return currentSession => {\n    if (currentSession.label === \"Focusing\") {\n      return {\n        label: \"On Break\",\n        timeRemaining: breakDuration * 60\n      };\n    }\n\n    return {\n      label: \"Focusing\",\n      timeRemaining: focusDuration * 60\n    };\n  };\n}\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  // const initialPomodoroState = {\n  //   isTimerRunning:false,\n  //   session:null,\n  //   focusDuration:25,\n  //   BreakDuration:5,\n  //   pause:true,\n  // }\n  // const {isTimerRunning,session,focusDuration,BreakDuration,pause} = initialPomodoroState\n  // const [activeSession,setActiveSession] = useState({initialPomodoroState})\n  const [isTimerRunning, setIsTimerRunning] = useState(false); // The current session - null where there is no session running\n\n  const [session, setSession] = useState(null); // ToDo: Allow the user to adjust the focus and break duration.\n\n  const [focusDuration, setFocusDuration] = useState([1]);\n  const [breakDuration, setBreakDuration] = useState([5]);\n  const [pause, setPause] = useState(true);\n  /**\n   * Custom hook that invokes the callback function every second\n   *\n   * NOTE: You will not need to make changes to the callback function\n   */\n\n  const audio = useInterval(() => {\n    // const session = data.session\n    // if (session.timeRemaining === 0) {\n    if (session.timeRemaining === 0) {\n      new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n      return setSession(nextSession(focusDuration, breakDuration)); // return setData(nextSession(focusDuration, breakDuration));\n    }\n\n    return setSession(nextTick); // return setData(nextTick);\n  }, isTimerRunning ? 1000 : null);\n  /**\n   * Called whenever the play/pause button is clicked.\n   */\n\n  function playPause() {\n    // console.log(isTimerRunning, focusDuration)\n    // console.log(data.pause)\n    // const change = !data.pause\n    setPause(!pause); // console.log(data.pause)\n\n    setIsTimerRunning(prevState => {\n      const nextState = !prevState;\n\n      if (nextState) {\n        setSession(prevStateSession => {\n          // If the timer is starting and the previous session is null,\n          // start a focusing session.\n          // console.log(prevStateSession, prevState, nextState)\n          if (prevStateSession === null) {\n            return {\n              label: \"Focusing\",\n              timeRemaining: focusDuration * 60\n            };\n          }\n\n          return prevStateSession;\n        });\n      }\n\n      return nextState;\n    });\n  }\n\n  const timeRemainingInMinutes = secondsToDuration(session === null || session === void 0 ? void 0 : session.timeRemaining);\n  const label = session === null || session === void 0 ? void 0 : session.label;\n  let progressPercent = (1 - (session === null || session === void 0 ? void 0 : session.timeRemaining) / (focusDuration * 60)) * 100; // label === \"Focusing\"\n  // ? setProgressPercent (() => (1 - session?.timeRemaining/(focusDuration*60))*100)\n  // : setProgressPercent (() =>(1 - session?.timeRemaining/(breakDuration*60))*100)\n  // : progressPercent =(1 - session?.timeRemaining/(breakDuration*60))*100\n\n  const stop = event => {\n    progressPercent = 0;\n    event.preventDefault(); // console.log(data.session, isTimerRunning,)\n    // setProgressPercent(null);\n\n    setFocusDuration(25);\n    setBreakDuration(5);\n    setIsTimerRunning(false);\n    setSession(null);\n    setPause(true);\n  };\n\n  console.log(session); // console.log(session?.timeRemaining)\n  // console.log((parseInt(focusDuration)))\n\n  console.log(progressPercent);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"pomodoro\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    disabled: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(FocusDuration, {\n    session: session,\n    focusDuration: focusDuration,\n    setFocusDuration: setFocusDuration,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"float-right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(BreakDuration, {\n    session: session,\n    breakDuration: breakDuration,\n    setBreakDuration: setBreakDuration,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 13\n    }\n  })))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"btn-group btn-group-lg mb-2\",\n    role: \"group\",\n    \"aria-label\": \"Timer controls\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    className: \"btn btn-primary\",\n    \"data-testid\": \"play-pause\",\n    title: \"Start or pause timer\",\n    onClick: playPause,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: classNames({\n      oi: true,\n      \"oi-media-play\": !isTimerRunning,\n      \"oi-media-pause\": isTimerRunning\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    className: \"btn btn-secondary\",\n    \"data-testid\": \"stop\",\n    title: \"Stop the session\",\n    onClick: stop,\n    disabled: !session,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"oi oi-media-stop\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 5\n    }\n  }))))), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(PomodoroDisplay, {\n    session: session,\n    pause: pause,\n    timeRemainingInMinutes: timeRemainingInMinutes,\n    focusDuration: focusDuration,\n    label: label,\n    playPause: playPause,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress\",\n    style: {\n      height: \"20px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress-bar\",\n    role: \"progressbar\",\n    \"aria-valuemin\": \"0\",\n    \"aria-valuemax\": \"100\",\n    \"aria-valuenow\": \"100\" // TODO: Increase aria-valuenow as elapsed time increases\n    ,\n    style: {\n      width: `${progressPercent}%`\n    } // TODO: Increase width % as elapsed time increases\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 15\n    }\n  }))))));\n}\n\nexport default Pomodoro;","map":{"version":3,"sources":["C:/Users/hoain/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Pomodoro.js"],"names":["React","useState","classNames","useInterval","minutesToDuration","secondsToDuration","FocusDuration","BreakDuration","PomodoroDisplay","nextTick","prevState","timeRemaining","Math","max","nextSession","focusDuration","breakDuration","currentSession","label","Pomodoro","isTimerRunning","setIsTimerRunning","session","setSession","setFocusDuration","setBreakDuration","pause","setPause","audio","Audio","play","playPause","nextState","prevStateSession","timeRemainingInMinutes","progressPercent","stop","event","preventDefault","console","log","oi","height","width"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport { minutesToDuration } from \"../utils/duration\";\nimport { secondsToDuration } from \"../utils/duration\"\nimport FocusDuration from \"./FocusDuration\"\nimport BreakDuration from \"./BreakDuration\"\nimport PomodoroDisplay from \"./PomodoroDisplay\";\n\n// These functions are defined outside of the component to insure they do not have access to state\n// and are, therefore more likely to be pure.\n\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\nfunction nextTick(prevState) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n  // timeRemaining = secondsToDuration(timeRemaining)\n  return {\n    ...prevState,\n    timeRemaining,\n  };\n}\n\n/**\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\nfunction nextSession(focusDuration, breakDuration) {\n  /**\n   * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n   */\n  return (currentSession) => {\n    if (currentSession.label === \"Focusing\") {\n      return {\n        label: \"On Break\",\n        timeRemaining: breakDuration * 60,\n      };\n    }\n    return {\n      label: \"Focusing\",\n      timeRemaining: focusDuration * 60,\n    };\n  };\n}\n\nfunction Pomodoro() {\n  // Timer starts out paused\n\n  // const initialPomodoroState = {\n  //   isTimerRunning:false,\n  //   session:null,\n  //   focusDuration:25,\n  //   BreakDuration:5,\n  //   pause:true,\n  // }\n\n  // const {isTimerRunning,session,focusDuration,BreakDuration,pause} = initialPomodoroState\n  // const [activeSession,setActiveSession] = useState({initialPomodoroState})\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  // The current session - null where there is no session running\n  const [session, setSession] = useState(null);\n  // ToDo: Allow the user to adjust the focus and break duration.\n  const [focusDuration, setFocusDuration] = useState([1]) \n  const [breakDuration, setBreakDuration] = useState([5]) \n  const [pause, setPause] = useState(true)\n\n  /**\n   * Custom hook that invokes the callback function every second\n   *\n   * NOTE: You will not need to make changes to the callback function\n   */\n\n  const audio = \n  useInterval(() => {\n    // const session = data.session\n    // if (session.timeRemaining === 0) {\n      if (session.timeRemaining === 0) {\n        new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n        return setSession(nextSession(focusDuration, breakDuration));\n        // return setData(nextSession(focusDuration, breakDuration));\n      }\n      return setSession(nextTick);\n      // return setData(nextTick);\n    },\n    isTimerRunning ? 1000 : null\n  );\n\n  /**\n   * Called whenever the play/pause button is clicked.\n   */\n  function playPause() {\n    // console.log(isTimerRunning, focusDuration)\n    // console.log(data.pause)\n    // const change = !data.pause\n    setPause(!pause)\n    // console.log(data.pause)\n\n    setIsTimerRunning((prevState) => {\n      const nextState = !prevState;\n      if (nextState) {    \n        \n        setSession((prevStateSession) => {\n          // If the timer is starting and the previous session is null,\n          // start a focusing session.\n          // console.log(prevStateSession, prevState, nextState)\n          if (prevStateSession === null) {\n            return {\n              label: \"Focusing\",\n              timeRemaining: focusDuration * 60,\n            };\n          }\n          return prevStateSession;\n        });\n        \n\n      }\n      return nextState;\n    });\n  }\n  const timeRemainingInMinutes = secondsToDuration(session?.timeRemaining)\n  const label = session?.label\n  \n  \n  let progressPercent = ((1 - session?.timeRemaining/(focusDuration*60))*100)\n  \n  // label === \"Focusing\"\n  // ? setProgressPercent (() => (1 - session?.timeRemaining/(focusDuration*60))*100)\n  // : setProgressPercent (() =>(1 - session?.timeRemaining/(breakDuration*60))*100)\n  // : progressPercent =(1 - session?.timeRemaining/(breakDuration*60))*100\n  const stop = (event) => {\n    progressPercent = 0;\n    event.preventDefault();\n    // console.log(data.session, isTimerRunning,)\n    // setProgressPercent(null);\n    setFocusDuration(25);\n    setBreakDuration(5);\n    setIsTimerRunning(false);\n    setSession(null);\n    setPause(true);  \n  }\n\n  console.log(session)\n  // console.log(session?.timeRemaining)\n  // console.log((parseInt(focusDuration)))\n\n \n  console.log(progressPercent)\n\n  \n\n  return (\n    <div className=\"pomodoro\">\n      <div className=\"row\" >\n        <div className=\"col\" disabled = {true}>\n            <FocusDuration  session = {session} focusDuration = {focusDuration} setFocusDuration = {setFocusDuration}/>\n            {/* <FocusDuration focusDuration = {focusDuration} setFocusDuration = {setFocusDuration}/> */}\n        </div>\n        <div className=\"col\">\n          <div className=\"float-right\">\n            <BreakDuration session = {session} breakDuration = {breakDuration} setBreakDuration = {setBreakDuration} />\n            {/* <BreakDuration breakDuration = {breakDuration} setBreakDuration = {setBreakDuration} /> */}\n          </div>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col\">\n          <div\n            className=\"btn-group btn-group-lg mb-2\"\n            role=\"group\"\n            aria-label=\"Timer controls\"\n          >\n            <button\n              type=\"button\"\n              className=\"btn btn-primary\"\n              data-testid=\"play-pause\"\n              title=\"Start or pause timer\"\n              onClick={playPause}\n            >\n              <span\n                className={classNames({\n                  oi: true,\n                  \"oi-media-play\": !isTimerRunning,\n                  \"oi-media-pause\": isTimerRunning,\n                })}\n              />\n            </button>\n            {/* TODO: Implement stopping the current focus or break session. and disable the stop button when there is no active session */}\n            {/* TODO: Disable the stop button when there is no active session */}\n            \n            {/* <StopButton session = {session}/> */}\n            <button\n    type=\"button\"\n    className=\"btn btn-secondary\"\n    data-testid=\"stop\"\n    title=\"Stop the session\"\n    onClick = {stop}\n    disabled = {!session}\n  >\n    <span className=\"oi oi-media-stop\" />\n  </button>\n          </div>\n        </div>\n      </div>\n      <div>\n        <PomodoroDisplay session = {session} pause = {pause} timeRemainingInMinutes ={timeRemainingInMinutes} focusDuration = {focusDuration} label = {label} playPause ={playPause}/>\n        {/* <PomodoroDisplay  data = {data} timeRemainingInMinutes ={timeRemainingInMinutes} focusDuration = {focusDuration} label = {label} playPause ={playPause}/> */}\n        <div className=\"row mb-2\">\n          <div className=\"col\">\n            <div className=\"progress\" style={{ height: \"20px\" }}>\n              <div\n                className=\"progress-bar\"\n                role=\"progressbar\"\n                aria-valuemin=\"0\"\n                aria-valuemax=\"100\"\n                aria-valuenow=\"100\" // TODO: Increase aria-valuenow as elapsed time increases\n                style={{ width: `${progressPercent}%` }} // TODO: Increase width % as elapsed time increases\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Pomodoro;\n"]},"metadata":{},"sourceType":"module"}