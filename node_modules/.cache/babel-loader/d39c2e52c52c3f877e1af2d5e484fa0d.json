{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hoain\\\\Project_Pomodoro_Timer_Qualified_1\\\\src\\\\pomodoro\\\\Pomodoro.js\";\nimport React, { useState } from \"react\";\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport { secondsToDuration } from \"../utils/duration\";\nimport FocusDuration from \"./FocusDuration\";\nimport BreakDuration from \"./BreakDuration\";\nimport TimerSessionDisplay from \"./TimerSessionDisplay\"; // These functions are defined outside of the component to insure they do not have access to state\n// and are, therefore more likely to be pure.\n\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\n\nfunction nextTick(prevState) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1); // timeRemaining = secondsToDuration(timeRemaining)\n\n  return { ...prevState,\n    timeRemaining\n  };\n}\n/**\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\n\n\nfunction nextSession(focusDuration, breakDuration) {\n  /**\n   * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n   */\n  return currentSession => {\n    if (currentSession.label === \"Focusing\") {\n      return {\n        label: \"On Break\",\n        timeRemaining: breakDuration * 60\n      };\n    }\n\n    return {\n      label: \"Focusing\",\n      timeRemaining: focusDuration * 60\n    };\n  };\n}\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false); // The current session - null where there is no session running\n\n  const [session, setSession] = useState(null); // ToDo: Allow the user to adjust the focus and break duration.\n\n  const defaultFocusDuration = 25;\n  const defaultBreakDuration = 5;\n  const [focusDuration, setFocusDuration] = useState(defaultFocusDuration);\n  const [breakDuration, setBreakDuration] = useState(defaultBreakDuration);\n  const [pause, setPause] = useState(true);\n  /**\n   * Custom hook that invokes the callback function every second\n   *\n   * NOTE: You will not need to make changes to the callback function\n   */\n\n  useInterval(() => {\n    if (session.timeRemaining === 0) {\n      new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n      return setSession(nextSession(focusDuration, breakDuration));\n    }\n\n    return setSession(nextTick);\n  }, isTimerRunning ? 1000 : null);\n  /**\n   * Called whenever the play/pause button is clicked.\n   */\n\n  function playPause() {\n    //Switch the \"pause\" state variable when the playPause button is clicked \n    setPause(!pause);\n    setIsTimerRunning(prevState => {\n      const nextState = !prevState;\n\n      if (nextState) {\n        setSession(prevStateSession => {\n          // If the timer is starting and the previous session is null,\n          // start a focusing session.\n          if (prevStateSession === null) {\n            return {\n              label: \"Focusing\",\n              timeRemaining: focusDuration * 60\n            };\n          }\n\n          return prevStateSession;\n        });\n      }\n\n      return nextState;\n    });\n  } //Converting the time remainer to the mm:ss format\n\n\n  const timeRemainingInMinutes = secondsToDuration(session === null || session === void 0 ? void 0 : session.timeRemaining); //Reset the initial values of all state variables so the initial screen appears when the stop button is clicked \n\n  const stop = event => {\n    event.preventDefault();\n    setFocusDuration(defaultFocusDuration);\n    setBreakDuration(defaultBreakDuration);\n    setIsTimerRunning(false);\n    setSession(null);\n    setPause(true);\n  }; //Disable the increating or decrementing buttons when the session is running\n\n\n  const disableFocusBreakBtn = (() => session ? true : false)();\n\n  const label = session === null || session === void 0 ? void 0 : session.label; //Create a holder variable for the progress percentage\n\n  let progressPercent = null; //Calculate the percentage of elapsed time of either \"focusing\" or \"on break\" and assign it to the progressPercent according to the label of the active session\n  //Return 0 progressPercent if the session is inactive\n\n  session !== null ? label === \"Focusing\" ? progressPercent = (1 - (session === null || session === void 0 ? void 0 : session.timeRemaining) / (focusDuration * 60)) * 100 : progressPercent = (1 - (session === null || session === void 0 ? void 0 : session.timeRemaining) / (breakDuration * 60)) * 100 : progressPercent = 0; //Add sound when time is expired\n\n  if (progressPercent === 100) new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"pomodoro\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    disabled: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(FocusDuration, {\n    disableFocusBreakBtn: disableFocusBreakBtn,\n    focusDuration: focusDuration,\n    setFocusDuration: setFocusDuration,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"float-right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(BreakDuration, {\n    disableFocusBreakBtn: disableFocusBreakBtn,\n    breakDuration: breakDuration,\n    setBreakDuration: setBreakDuration,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 13\n    }\n  })))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"btn-group btn-group-lg mb-2\",\n    role: \"group\",\n    \"aria-label\": \"Timer controls\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    className: \"btn btn-primary\",\n    \"data-testid\": \"play-pause\",\n    title: \"Start or pause timer\",\n    onClick: playPause,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: classNames({\n      oi: true,\n      \"oi-media-play\": !isTimerRunning,\n      \"oi-media-pause\": isTimerRunning\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    className: \"btn btn-secondary\",\n    \"data-testid\": \"stop\",\n    title: \"Stop the session\",\n    onClick: stop,\n    disabled: !session,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"oi oi-media-stop\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 5\n    }\n  }))))), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(TimerSessionDisplay, {\n    session: session,\n    pause: pause,\n    timeRemainingInMinutes: timeRemainingInMinutes,\n    focusDuration: focusDuration,\n    breakDuration: breakDuration,\n    label: label,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress\",\n    style: {\n      height: \"20px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress-bar\",\n    role: \"progressbar\",\n    \"aria-valuemin\": \"0\",\n    \"aria-valuemax\": \"100\",\n    \"aria-valuenow\": progressPercent // TODO: Increase aria-valuenow as elapsed time increases\n    ,\n    style: {\n      width: `${progressPercent}%`\n    } // TODO: Increase width % as elapsed time increases\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 15\n    }\n  }))))));\n}\n\nexport default Pomodoro;","map":{"version":3,"sources":["C:/Users/hoain/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Pomodoro.js"],"names":["React","useState","classNames","useInterval","secondsToDuration","FocusDuration","BreakDuration","TimerSessionDisplay","nextTick","prevState","timeRemaining","Math","max","nextSession","focusDuration","breakDuration","currentSession","label","Pomodoro","isTimerRunning","setIsTimerRunning","session","setSession","defaultFocusDuration","defaultBreakDuration","setFocusDuration","setBreakDuration","pause","setPause","Audio","play","playPause","nextState","prevStateSession","timeRemainingInMinutes","stop","event","preventDefault","disableFocusBreakBtn","progressPercent","oi","height","width"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport { secondsToDuration } from \"../utils/duration\"\nimport FocusDuration from \"./FocusDuration\"\nimport BreakDuration from \"./BreakDuration\"\nimport TimerSessionDisplay from \"./TimerSessionDisplay\";\n\n// These functions are defined outside of the component to insure they do not have access to state\n// and are, therefore more likely to be pure.\n\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\nfunction nextTick(prevState) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n  // timeRemaining = secondsToDuration(timeRemaining)\n  return {\n    ...prevState,\n    timeRemaining,\n  };\n}\n\n/**\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\nfunction nextSession(focusDuration, breakDuration) {\n  /**\n   * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n   */\n  return (currentSession) => {\n    if (currentSession.label === \"Focusing\") {\n      return {\n        label: \"On Break\",\n        timeRemaining: breakDuration * 60,\n      };\n    }\n    return {\n      label: \"Focusing\",\n      timeRemaining: focusDuration * 60,\n    };\n  };\n}\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  // The current session - null where there is no session running\n  const [session, setSession] = useState(null);\n  // ToDo: Allow the user to adjust the focus and break duration.\n  const defaultFocusDuration = 25\n  const defaultBreakDuration = 5\n  const [focusDuration, setFocusDuration] = useState(defaultFocusDuration); \n  const [breakDuration, setBreakDuration] = useState(defaultBreakDuration); \n  const [pause, setPause] = useState(true);\n\n  /**\n   * Custom hook that invokes the callback function every second\n   *\n   * NOTE: You will not need to make changes to the callback function\n   */\n\n  useInterval(() => {\n      if (session.timeRemaining === 0) {\n        new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n        return setSession(nextSession(focusDuration, breakDuration));\n      }\n      return setSession(nextTick);\n    },\n    isTimerRunning ? 1000 : null\n  );\n\n  /**\n   * Called whenever the play/pause button is clicked.\n   */\n  function playPause() {\n    //Switch the \"pause\" state variable when the playPause button is clicked \n    setPause(!pause)\n    setIsTimerRunning((prevState) => {\n      const nextState = !prevState;\n      if (nextState) {            \n        setSession((prevStateSession) => {\n          // If the timer is starting and the previous session is null,\n          // start a focusing session.\n          if (prevStateSession === null) {\n            return {\n              label: \"Focusing\",\n              timeRemaining: focusDuration * 60,\n            };\n          }\n          return prevStateSession;\n        });        \n      }\n      return nextState;\n    });\n  }\n\n  //Converting the time remainer to the mm:ss format\n  const timeRemainingInMinutes = secondsToDuration(session?.timeRemaining);\n  \n  //Reset the initial values of all state variables so the initial screen appears when the stop button is clicked \n  const stop = (event) => {\n    event.preventDefault();\n    setFocusDuration(defaultFocusDuration);\n    setBreakDuration(defaultBreakDuration);\n    setIsTimerRunning(false);\n    setSession(null);\n    setPause(true);  \n  }\n  \n  //Disable the increating or decrementing buttons when the session is running\n  const disableFocusBreakBtn = (() => session ? true : false )();\n\n  const label = session?.label;\n  //Create a holder variable for the progress percentage\n  let progressPercent = null;\n\n  //Calculate the percentage of elapsed time of either \"focusing\" or \"on break\" and assign it to the progressPercent according to the label of the active session\n  //Return 0 progressPercent if the session is inactive\n  session !== null \n    ? label === \"Focusing\"\n      ? progressPercent = (1 - session?.timeRemaining/(focusDuration*60))*100\n      : progressPercent = (1 - session?.timeRemaining/(breakDuration*60))*100\n    : progressPercent = 0;\n\n  //Add sound when time is expired\n  if (progressPercent === 100)\n    new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play()\n\n\n  return (\n    <div className=\"pomodoro\">\n      <div className=\"row\" >\n        <div className=\"col\" disabled = {true}>\n           {/* Create FocusDuration component to adjust the duration of \"focusing\" and disable any buttons when the session is active*/}\n            <FocusDuration  disableFocusBreakBtn = {disableFocusBreakBtn} \n                            focusDuration = {focusDuration} \n                            setFocusDuration = {setFocusDuration}/>\n        </div>\n        <div className=\"col\">\n          <div className=\"float-right\">\n            {/* Create BreakDuration component to adjust the duration of \"on break\" and disable any buttons when the session is active*/}\n            <BreakDuration  disableFocusBreakBtn = {disableFocusBreakBtn} \n                            breakDuration = {breakDuration} \n                            setBreakDuration = {setBreakDuration} />\n          </div>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col\">\n          <div\n            className=\"btn-group btn-group-lg mb-2\"\n            role=\"group\"\n            aria-label=\"Timer controls\"\n          >\n            <button\n              type=\"button\"\n              className=\"btn btn-primary\"\n              data-testid=\"play-pause\"\n              title=\"Start or pause timer\"\n              onClick={playPause}\n            >\n              <span\n                className={classNames({\n                  oi: true,\n                  \"oi-media-play\": !isTimerRunning,\n                  \"oi-media-pause\": isTimerRunning,\n                })}\n              />\n            </button>\n            {/* TODO: Implement stopping the current focus or break session. and disable the stop button when there is no active session */}\n            {/* TODO: Disable the stop button when there is no active session */}\n            <button\n    type=\"button\"\n    className=\"btn btn-secondary\"\n    data-testid=\"stop\"\n    title=\"Stop the session\"\n    onClick = {stop}\n    disabled = {!session}\n  >\n    <span className=\"oi oi-media-stop\" />\n  </button>\n          </div>\n        </div>\n      </div>\n      <div>\n         {/* Create the \"TimerSessionDisplay\" component to display the timer session when the session is active */}\n        <TimerSessionDisplay  session = {session} \n                              pause = {pause} \n                              timeRemainingInMinutes ={timeRemainingInMinutes} \n                              focusDuration = {focusDuration} \n                              breakDuration = {breakDuration}  \n                              label = {label} \n                              />\n        <div className=\"row mb-2\">\n          <div className=\"col\">\n            <div className=\"progress\" style={{ height: \"20px\" }}>\n              <div\n                className=\"progress-bar\"\n                role=\"progressbar\"\n                aria-valuemin=\"0\"\n                aria-valuemax=\"100\"\n                aria-valuenow= {progressPercent} // TODO: Increase aria-valuenow as elapsed time increases\n                style={{ width: `${progressPercent}%` }} // TODO: Increase width % as elapsed time increases\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Pomodoro;\n"]},"metadata":{},"sourceType":"module"}